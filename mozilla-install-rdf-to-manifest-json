#!/usr/local/bin/python
# @(#) $Id: Mozilla-addon-hack,v 1.3 2019/08/16 21:29:15 leres Exp $ (LBL)
"""Convert mozilla install.rdf (xml) to manifest.json"""

from __future__ import print_function

import argparse
import json
import os
import sys
import xml.etree.ElementTree

OPTS = None
PROG = '?'

# The thunderbird id is sometimes found in the outer description,
# sometimes in the application description
# We cannot use it or else extension will conflict with each other!
TBIRD_ID = '{3550f703-e582-4d05-9a08-453d09bdfdc6}'

def dprint(*args):
    """Debug print function"""
    if OPTS.debug:
        print(*args, file=sys.stderr)

def striptag(child):
    """Strip a tag"""
    tag = child.tag
    tup = tag.split('}')
    if len(tup) == 2:
        tag = tup[1]
    return tag

def process(f):
    """Convert one file"""
    applications = {}
    application = {}
    contributors = []
    creator = None
    description = None
    ids = []
    name = None
    version = None
    optionsurl = None

    # Read and parse
    buf = f.read()
    root = xml.etree.ElementTree.fromstring(buf)

    # Extract data
    for child in root:
        dprint('#    child', child.tag)
        for child2 in child:
            tag2 = striptag(child2)

            dprint('#        child2', tag2)
            #print('#', dir(child2))

            # Single tags
            if tag2 == 'creator':
                creator = child2.text
                continue

            if tag2 == 'description':
                description = child2.text
                continue

            if tag2 == 'id':
                ids.append(child2.text)
                continue

            if tag2 == 'name':
                name = child2.text
                continue

            if tag2 == 'optionsURL':
                optionsurl = child2.text
                continue

            if tag2 == 'version':
                version = child2.text
                continue

            # Multiple tags
            if tag2 == 'contributor':
                contributors.append(child2.text)
                continue

            # Applications (XXX hack: just do the first one)
            if tag2 == 'targetApplication' and not application:
                for child3 in child2:
                    tag3 = striptag(child3)
                    if tag3 == 'Description':
                        for child4 in child3:
                            tag4 = striptag(child4)
                            text4 = child4.text
                            #print('# app tag', tag4, '=', text4)
                            if tag4 == 'minVersion':
                                tag4 = 'strict_min_version'
                            elif tag4 == 'maxVersion':
                                # max_version override
                                tag4 = 'strict_max_version'
                                if OPTS.maxversion:
                                    text4 = OPTS.maxversion
                            elif tag4 == 'id':
                                # id hack -- do not use the thunderbird id!!
                                ids.append(child4.text)
                                ids.sort()
                                try:
                                    ids.remove(TBIRD_ID)
                                except ValueError:
                                    pass
                                text4 = ids[0]

                            application[tag4] = text4

                    # XXX gecko only?
                    applications['gecko'] = application

            # Debug
            for child3 in child2:
                tag3 = striptag(child3)
                dprint('#            child3', tag3)
                for child4 in child3:
                    tag4 = striptag(child4)
                    dprint('#                child4', tag4)

    # Build the manifest
    data = {
        'author': creator,
        'description': description,
        'manifest_version': 2,
        'name': name,
        'version': version,
    }

    if applications:
        data['applications'] = applications
    if contributors:
        data['contributor'] = contributors

    if optionsurl:
        data['legacy'] = {
            'type': 'xul',
            'options': {
                'page': optionsurl,
            }
        }

    print(json.dumps(data, indent=4, sort_keys=True))
    return 0

def main(argv=None):
    """Parse options, output config"""
    global OPTS
    global PROG

    if not argv:
        argv = sys.argv

    PROG = os.path.basename(argv[0])
    version = '$Revision: 1.3 $'.strip('$').rstrip()

    parser = argparse.ArgumentParser()
    parser.add_argument('--version', action='version', version=version)
    parser.add_argument('-d', dest='debug', action='count', default=0,
        help='turn on debugging')
    parser.add_argument('-v', dest='verbose', action='count', default=0,
        help='verbose messages')
    parser.add_argument('-m', dest='maxversion',
        help="maximum version override (e.g. '123.*')")
    parser.add_argument('--debugger', action='store_true',
        help=argparse.SUPPRESS)

    parser.add_argument('file', metavar='FILE', nargs='?',
        help='optional file to process')

    OPTS = parser.parse_args()

    # argparse debugging
    if OPTS.debug > 1:
        for key in dir(OPTS):
            if not key.startswith('_'):
                print('# %s=%s' % (key, getattr(OPTS, key)), file=sys.stderr)

    # Interactive debugging
    if OPTS.debugger:
        # pylint: disable=C0415
        import pdb
        # pylint: enable=C0415
        pdb.set_trace()

    if not OPTS.file:
        try:
            return process(sys.stdin)
        except KeyboardInterrupt:
            return 1
    try:
        with open(OPTS.file) as f:
            return process(f)
    except KeyboardInterrupt:
        return 1

    return 0

if __name__ == "__main__":
    sys.exit(main())
